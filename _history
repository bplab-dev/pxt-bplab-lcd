{"entries":[{"timestamp":1739411111546,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"buuBr%MtPE_mc6|2AnP1\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"p3W2*P;%;.wRO*iO)|~D\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n* I2C_LCD1602\n*/\n//% weight=1 color=#0fbc11 icon=\"\\uf0ad\"\nnamespace LCD {\n    let i2cAddr: number // 0x3F: PCF8574A, 0x27: PCF8574 \n    let BK: number      // Backlight control\n    let RS: number      // Command/Data selection\n\n    // LCD register setup\n    function setreg(d: number) {\n        pins.i2cWriteNumber(i2cAddr, d, NumberFormat.Int8LE)\n        basic.pause(1)\n    }\n\n    // Send data through I2C bus\n    function set(d: number) {\n        d = d & 0xF0\n        d = d + BK + RS\n        setreg(d)\n        setreg(d + 4)\n        setreg(d)\n    }\n\n    // Send command\n    function cmd(d: number) {\n        RS = 0\n        set(d)\n        set(d << 4)\n    }\n\n    // Send data\n    function dat(d: number) {\n        RS = 1\n        set(d)\n        set(d << 4)\n    }\n\n    // Auto detect LCD address\n    function AutoAddr() {\n        let k = true\n        let addr = 0x20\n        let d1 = 0, d2 = 0\n        while (k && (addr < 0x28)) {\n            pins.i2cWriteNumber(addr, -1, NumberFormat.Int32LE)\n            d1 = pins.i2cReadNumber(addr, NumberFormat.Int8LE) % 16\n            pins.i2cWriteNumber(addr, 0, NumberFormat.Int16LE)\n            d2 = pins.i2cReadNumber(addr, NumberFormat.Int8LE)\n            if ((d1 == 7) && (d2 == 0)) k = false\n            else addr += 1\n        }\n        if (!k) return addr\n\n        addr = 0x38\n        while (k && (addr < 0x40)) {\n            pins.i2cWriteNumber(addr, -1, NumberFormat.Int32LE)\n            d1 = pins.i2cReadNumber(addr, NumberFormat.Int8LE) % 16\n            pins.i2cWriteNumber(addr, 0, NumberFormat.Int16LE)\n            d2 = pins.i2cReadNumber(addr, NumberFormat.Int8LE)\n            if ((d1 == 7) && (d2 == 0)) k = false\n            else addr += 1\n        }\n        if (!k) return addr\n        else return 0\n    }\n\n    /**\n     * Initialize LCD and set I2C address. PCF8574/PCF8574A address is 39/63\n     * @param Addr LCD i2c address, eg: 0, 39, 63. 0 for auto detection\n     */\n    //% blockId=\"I2C_LCD1620_SET_ADDRESS\" block=\"LCD initialize with Address %addr\"\n    //% weight=100 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function LcdInit(Addr: number) {\n        if (Addr == 0) i2cAddr = AutoAddr()\n        else i2cAddr = Addr\n        BK = 8\n        RS = 0\n        cmd(0x33)       // Set 4-bit mode\n        basic.pause(5)\n        set(0x30)\n        basic.pause(5)\n        set(0x20)\n        basic.pause(5)\n        cmd(0x28)       // Set mode\n        cmd(0x0C)\n        cmd(0x06)\n        cmd(0x01)       // Clear screen\n    }\n\n    /**\n     * Display number at specified position on LCD\n     * @param n number to display, eg: 10, 100, 200\n     * @param x LCD column position, eg: 0\n     * @param y LCD row position, eg: 0\n     */\n    //% blockId=\"I2C_LCD1620_SHOW_NUMBER\" block=\"show number %n|at x %x|y %y\"\n    //% weight=90 blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=LCD1602_I2C trackArgs=0\n    export function ShowNumber(n: number, x: number, y: number): void {\n        let s = n.toString()\n        ShowString(s, x, y)\n    }\n\n    /**\n     * Display string at specified position on LCD\n     * @param s string to display, eg: \"Hello\"\n     * @param x LCD column position, [0 - 15], eg: 0\n     * @param y LCD row position, [0 - 1], eg: 0\n     */\n    //% blockId=\"I2C_LCD1620_SHOW_STRING\" block=\"show string %s|at x %x|y %y\"\n    //% weight=90 blockGap=8\n    //% x.min=0 x.max=15\n    //% y.min=0 y.max=1\n    //% parts=LCD1602_I2C trackArgs=0\n    export function ShowString(s: string, x: number, y: number): void {\n        let a: number\n\n        if (y > 0)\n            a = 0xC0\n        else\n            a = 0x80\n        a += x\n        cmd(a)\n\n        for (let i = 0; i < s.length; i++) {\n            dat(s.charCodeAt(i))\n        }\n    }\n\n    /**\n     * Turn on LCD\n     */\n    //% blockId=\"I2C_LCD1620_ON\" block=\"turn on LCD\"\n    //% weight=81 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function on(): void {\n        cmd(0x0C)\n    }\n\n    /**\n     * Turn off LCD\n     */\n    //% blockId=\"I2C_LCD1620_OFF\" block=\"turn off LCD\"\n    //% weight=80 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function off(): void {\n        cmd(0x08)\n    }\n\n    /**\n     * Clear all display contents\n     */\n    //% blockId=\"I2C_LCD1620_CLEAR\" block=\"clear LCD\"\n    //% weight=85 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function clear(): void {\n        cmd(0x01)\n    }\n\n    /**\n     * Turn on LCD backlight\n     */\n    //% blockId=\"I2C_LCD1620_BACKLIGHT_ON\" block=\"turn on backlight\"\n    //% weight=71 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function BacklightOn(): void {\n        BK = 8\n        cmd(0)\n    }\n\n    /**\n     * Turn off LCD backlight\n     */\n    //% blockId=\"I2C_LCD1620_BACKLIGHT_OFF\" block=\"turn off backlight\"\n    //% weight=70 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function BacklightOff(): void {\n        BK = 0\n        cmd(0)\n    }\n\n    /**\n     * Shift display left\n     */\n    //% blockId=\"I2C_LCD1620_SHL\" block=\"Shift Left\"\n    //% weight=61 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function shl(): void {\n        cmd(0x18)\n    }\n\n    /**\n     * Shift display right\n     */\n    //% blockId=\"I2C_LCD1620_SHR\" block=\"Shift Right\"\n    //% weight=60 blockGap=8\n    //% parts=LCD1602_I2C trackArgs=0\n    export function shr(): void {\n        cmd(0x1C)\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":5361,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":235,"start2":235,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1739411111545,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"LCD - bplab\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1739411152435}