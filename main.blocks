<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="f8ULU7ARHV~v_{TWym(L" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="$Ba{ed$g*22wxZLjmcN7"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace LCD {" line1="    let i2cAddr: number // 0x3F: PCF8574A, 0x27: PCF8574 " line2="    let BK: number      // Backlight control (8: ON, 0: OFF)" line3="    let RS: number      // Register selection(0: Command, 1: Data)" line4="" line5="    export enum I2CLCDAddress {" line6="        AutoDetect = 0," line7="        PCF8574 = 39,   // 0x27" line8="        PCF8574A = 63   // 0x3f" line9="    }" line10="" line11="    export enum LCDCommand {" line12="        NOP = 0x00,             // NOP(No Operation): Do nothing. Use for delay or synchronization" line13="        ClearDisplay = 0x01,    // Clear everything on the screen and move the cursor to the home position (0,0). Wait 1.52 ms after execution" line14="        EntryModeSet = 0x06,    // Set cursor movement direction to right. Cursor automatically moves to the right when typing text" line15="        " line16="        DisplayOff = 0x08,      // Turn off the display. Data is retained" line17="        DisplayOn = 0x0C,       // Turn on the screen and hide the cursor" line18="        ShiftDisplayLeft = 0x18,    // Move full-screen content one space to the left" line19="        ShiftDisplayRight = 0x1C,    // Move full-screen content one space to the right" line20="" line21="        Set4bitMode = 0x28,    // Set 4-bit mode, two-line display, 5x8 dot font" line22="        Set4bitModeInit = 0x33, // Initiate 4-bit mode initialization." line23="" line24="        AddrTo0 = 0x80  // Move the cursor to the start of the first line Set the DDRAM address to 0" line25="    }" line26="" line27="    // LCD register setup" line28="    function _setreg(d: number) {" line29="        pins.i2cWriteNumber(i2cAddr, d, NumberFormat.Int8LE)" line30="        basic.pause(1)" line31="    }" line32="" line33="    // Send data through I2C bus" line34="    function _set(d: number) {" line35="        d = d &amp; 0xF0" line36="        d = d + BK + RS" line37="        _setreg(d)" line38="        _setreg(d + 4)" line39="        _setreg(d)" line40="    }" line41="" line42="    // Send command" line43="    function _cmd(d: number) {" line44="        RS = 0" line45="        _set(d)" line46="        _set(d &lt;&lt; 4)" line47="    }" line48="" line49="    // Send data" line50="    function _dat(d: number) {" line51="        RS = 1" line52="        _set(d)" line53="        _set(d &lt;&lt; 4)" line54="    }" line55="" line56="    // Auto detect LCD address" line57="    function _autoAddr() {" line58="        let k = true" line59="        let addr = 0x20" line60="        let d1 = 0, d2 = 0" line61="        while (k &amp;&amp; (addr &lt; 0x28)) {" line62="            pins.i2cWriteNumber(addr, -1, NumberFormat.Int32LE)" line63="            d1 = pins.i2cReadNumber(addr, NumberFormat.Int8LE) % 16" line64="            pins.i2cWriteNumber(addr, 0, NumberFormat.Int16LE)" line65="            d2 = pins.i2cReadNumber(addr, NumberFormat.Int8LE)" line66="            if ((d1 == 7) &amp;&amp; (d2 == 0)) k = false" line67="            else addr += 1" line68="        }" line69="        if (!k) return addr" line70="" line71="        addr = 0x38" line72="        while (k &amp;&amp; (addr &lt; 0x40)) {" line73="            pins.i2cWriteNumber(addr, -1, NumberFormat.Int32LE)" line74="            d1 = pins.i2cReadNumber(addr, NumberFormat.Int8LE) % 16" line75="            pins.i2cWriteNumber(addr, 0, NumberFormat.Int16LE)" line76="            d2 = pins.i2cReadNumber(addr, NumberFormat.Int8LE)" line77="            if ((d1 == 7) &amp;&amp; (d2 == 0)) k = false" line78="            else addr += 1" line79="        }" line80="        if (!k) return addr" line81="        else return 0" line82="    }" line83="" line84="    /**" line85="     * Initialize LCD and set I2C address. PCF8574/PCF8574A address is 39/63" line86="     * @param Addr LCD i2c address, eg: 0, 39, 63. 0 for auto detection" line87="     */" line88="    //% blockId=&quot;I2C_LCD1620_SET_ADDRESS&quot; block=&quot;LCD initialize with Address %addr&quot;" line89="    //% weight=100 blockGap=8" line90="    //% parts=LCD1602_I2C trackArgs=0" line91="    export function lcdInit(Addr: I2CLCDAddress) {" line92="        if (Addr == 0) i2cAddr = _autoAddr()" line93="        else i2cAddr = Addr" line94="        BK = 8" line95="        RS = 0" line96="        _cmd(LCDCommand.Set4bitModeInit)       // Set 4-bit mode" line97="        basic.pause(5)" line98="        _set(0x30)" line99="        basic.pause(5)" line100="        _set(0x20)" line101="        basic.pause(5)" line102="        _cmd(LCDCommand.Set4bitMode)       // Set mode" line103="        _cmd(LCDCommand.DisplayOn)" line104="        _cmd(LCDCommand.EntryModeSet)" line105="        _cmd(LCDCommand.ClearDisplay)       // Clear screen" line106="    }" line107="" line108="    /**" line109="     * Display number at specified position on LCD" line110="     * @param n number to display, eg: 10, 100, 200" line111="     * @param x LCD column position, eg: 0" line112="     * @param y LCD row position, eg: 0" line113="     */" line114="    //% blockId=&quot;I2C_LCD1620_SHOW_NUMBER&quot; block=&quot;show number %n|at x %x|y %y&quot;" line115="    //% weight=90 blockGap=8" line116="    //% x.min=0 x.max=15" line117="    //% y.min=0 y.max=1" line118="    //% parts=LCD1602_I2C trackArgs=0" line119="    export function showNumber(n: number, x: number, y: number): void {" line120="        let s = n.toString()" line121="        showString(s, x, y)" line122="    }" line123="" line124="    /**" line125="     * Display string at specified position on LCD" line126="     * @param s string to display, eg: &quot;Hello&quot;" line127="     * @param x LCD column position, [0 - 15], eg: 0" line128="     * @param y LCD row position, [0 - 1], eg: 0" line129="     */" line130="    //% blockId=&quot;I2C_LCD1620_SHOW_STRING&quot; block=&quot;show string %s|at x %x|y %y&quot;" line131="    //% weight=90 blockGap=8" line132="    //% x.min=0 x.max=15" line133="    //% y.min=0 y.max=1" line134="    //% parts=LCD1602_I2C trackArgs=0" line135="    export function showString(s: string, x: number, y: number): void {" line136="        let a: number" line137="" line138="        if (y &gt; 0)" line139="            a = 0xC0" line140="        else" line141="            a = 0x80" line142="        a += x" line143="        _cmd(a)" line144="" line145="        for (let i = 0; i &lt; s.length; i++) {" line146="            _dat(s.charCodeAt(i))" line147="        }" line148="    }" line149="" line150="    /**" line151="     * Turn on LCD" line152="     */" line153="    //% blockId=&quot;I2C_LCD1620_ON&quot; block=&quot;turn on LCD&quot;" line154="    //% weight=81 blockGap=8" line155="    //% parts=LCD1602_I2C trackArgs=0" line156="    export function on(): void {" line157="        _cmd(LCDCommand.DisplayOn)" line158="    }" line159="" line160="    /**" line161="     * Turn off LCD" line162="     */" line163="    //% blockId=&quot;I2C_LCD1620_OFF&quot; block=&quot;turn off LCD&quot;" line164="    //% weight=80 blockGap=8" line165="    //% parts=LCD1602_I2C trackArgs=0" line166="    export function off(): void {" line167="        _cmd(LCDCommand.DisplayOff)" line168="    }" line169="" line170="    /**" line171="     * Clear all display contents" line172="     */" line173="    //% blockId=&quot;I2C_LCD1620_CLEAR&quot; block=&quot;clear LCD&quot;" line174="    //% weight=85 blockGap=8" line175="    //% parts=LCD1602_I2C trackArgs=0" line176="    export function clear(): void {" line177="        _cmd(LCDCommand.ClearDisplay)" line178="    }" line179="" line180="    /**" line181="     * Turn on LCD backlight" line182="     */" line183="    //% blockId=&quot;I2C_LCD1620_BACKLIGHT_ON&quot; block=&quot;turn on backlight&quot;" line184="    //% weight=71 blockGap=8" line185="    //% parts=LCD1602_I2C trackArgs=0" line186="    export function backlightOn(): void {" line187="        BK = 8" line188="        _cmd(LCDCommand.NOP)" line189="    }" line190="" line191="    /**" line192="     * Turn off LCD backlight" line193="     */" line194="    //% blockId=&quot;I2C_LCD1620_BACKLIGHT_OFF&quot; block=&quot;turn off backlight&quot;" line195="    //% weight=70 blockGap=8" line196="    //% parts=LCD1602_I2C trackArgs=0" line197="    export function backlightOff(): void {" line198="        BK = 0" line199="        _cmd(LCDCommand.NOP)" line200="    }" line201="" line202="    /**" line203="     * Shift display left" line204="     */" line205="    //% blockId=&quot;I2C_LCD1620_SHL&quot; block=&quot;Shift Left&quot;" line206="    //% weight=61 blockGap=8" line207="    //% parts=LCD1602_I2C trackArgs=0" line208="    export function shl(): void {" line209="        _cmd(LCDCommand.ShiftDisplayLeft)" line210="    }" line211="" line212="    /**" line213="     * Shift display right" line214="     */" line215="    //% blockId=&quot;I2C_LCD1620_SHR&quot; block=&quot;Shift Right&quot;" line216="    //% weight=60 blockGap=8" line217="    //% parts=LCD1602_I2C trackArgs=0" line218="    export function shr(): void {" line219="        _cmd(LCDCommand.ShiftDisplayRight)" line220="    }" line221="}" numlines="222"></mutation></block></statement></block></xml>